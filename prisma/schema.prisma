generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Patient {
//   id         String    @id @default(uuid())
//   email      String    @unique @db.VarChar(70)
//   firstname  String    @db.VarChar(50)
//   lastname   String    @db.VarChar(50)
//   phone      String?   @db.VarChar(20)
//   birthdate  DateTime?
//   state      Boolean   @default(true)
//   address    String?
//   created_at DateTime? @default(now())
//   updated_at DateTime? @updatedAt
//   dni        String    @unique @db.VarChar(30)
//   // result     Result[]

//   @@index([firstname, lastname])
// }

model Employee {
  id         String    @id @default(uuid())
  email      String    @unique @db.VarChar(70)
  firstname  String    @db.VarChar(50)
  lastname   String    @db.VarChar(50)
  password   String    @db.VarChar(255)
  rol        Role      @default(Analista)
  phone      String?   @db.VarChar(20)
  address    String?
  isActive   Boolean?  @default(true)
  state      Boolean?  @default(true)
  birthdate  DateTime?
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  dni        String?   @unique @db.VarChar(30)
  // result     Result[]
  Profile    Profile[]

  @@index([firstname, lastname])
}

model Profile {
  id         String    @id @default(uuid())
  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId String?
  biography  String?   @default("Hi!")
  image      String?
}

// model Test {
//   id          String        @id @default(uuid())
//   name        String        @unique @db.VarChar(50)
//   price       Decimal       @default(0.00) @db.Decimal(10, 2)
//   discount    Int?          @default(0) @db.SmallInt()
//   created_at  DateTime?     @default(now())
//   updated_at  DateTime?     @updatedAt
//   Test_Result Test_Result[]
// }

// model Result {
//   id            String        @id @default(uuid())
//   patient       Patient?      @relation(fields: [patientId], references: [id], onDelete: SetNull, onUpdate: Cascade)
//   patientId     String?
//   employee      Employee?     @relation(fields: [employeeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
//   employeeId    String?
//   paymentcode   String?
//   price         Decimal       @default(0.00) @db.Decimal(10, 2)
//   paymentMethod Payment       @default(Efectivo)
//   paymentDate   DateTime?
//   tests         Test_Result[]
//   created_at    DateTime?     @default(now())
//   updated_at    DateTime?     @updatedAt
// }

// model Test_Result {
//   test     Test   @relation(fields: [testId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   testId   String
//   result   Result @relation(fields: [resultId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   resultId String

//   @@id([testId, resultId])
// }

enum Role {
  Administrador
  Analista
  Asistente
  Gerente
}

enum Payment {
  Efectivo
  Debito
  PagoMovil
  Transferencia
}
